import numpy as np
import matplotlib as plt
from functions import *
import time 
from functools import reduce

@timer
def P12(N, BN=None, v=False):
	'''
	The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
	1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
	Let us list the factors of the first seven triangle numbers:
	     1: 1
	     3: 1,3
	     6: 1,2,3,6
	    10: 1,2,5,10
	    15: 1,3,5,15
	    21: 1,3,7,21
	    28: 1,2,4,7,14,28
	We can see that 28 is the first triangle number to have over five divisors.
	What is the value of the first triangle number to have over five hundred divisors?
	'''
    # calculate number of divisor
    # with formula total div = 
    # (p1+1) * (p2+1) *.....* (pn+1)
    # where n = (a1^p1)*(a2^p2).... 
    # *(an^pn) ai being prime divisor
    # for n and pi are their respective 
    # power in factorization

	#a1**b1 + a2**b2
	n = np.linspace(1, N, N, dtype=np.int64)
	Dmax = [0,0]

	for i in n*(n+1)/2:

		factors = factorize_big_number(i)
		unique, counts = np.unique(factors, return_counts=True)
		dn = np.prod(counts+1)
		if Dmax[0]<dn:
			Dmax[0] = dn # numero de divisores 
			Dmax[1] = i  # maximo divisor

	return Dmax[1]