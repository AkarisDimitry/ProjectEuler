import numpy as np
import matplotlib as plt
import time 
from functools import reduce

class Problems(object):
	def __init__(self, 	):
		self.problem_data = None
		self._solve = []
		self.show_problem = True

		self.primes_list = None
		self.F = None

	@property
	def solve(self):
		return self._solve
	
	@solve.setter
	def solve(self, s):
		if s['problems'] == 1: ans = self.P1(s['args'])
		if s['problems'] == 2: ans = self.P2(s['args'])
		if s['problems'] == 3: ans = self.P3(s['args'])
		if s['problems'] == 4: ans = self.P4(s['args'])
		if s['problems'] == 5: ans = self.P5(s['args'])
		if s['problems'] == 6: ans = self.P6(s['args'])
		if s['problems'] == 7: ans = self.P7(s['args'])
		if s['problems'] == 8: ans = self.P8(s['args'])
		if s['problems'] == 9: ans = self.P9(s['args'])
		if s['problems'] == 10: ans = self.P10(s['args'])
		if s['problems'] == 11: ans = self.P11(s['args'])
		if s['problems'] == 12: ans = self.P12(s['args'])
		if s['problems'] == 13: ans = self.P13(s['args'])
		if s['problems'] == 14: ans = self.P14(s['args'])
		if s['problems'] == 98: ans = self.P98(s['args'])
		if s['problems'] == 206: ans = self.P206(s['args'])

		print(f'{s} >> ANS >> {ans}')
		return True

	def print(self, ):
		if type(self.U) == np.ndarray:
			print(f'')

	def timer(func):
		def wrapper(*args, **kwargs):
			before = time.time()
			r = func(*args, **kwargs)
			print(f'{func} {time.time()-before}s ')
			return r

		return wrapper

	@timer
	def Fibonacci(self, N, init=[1, 1], Fmax=None, save=True):
		init = init
		Fmax = Fmax if type(Fmax) != type(None) else np.inf
		F = np.zeros(N)
		F[1], F[0] = init[-1], init[-2]

		for n in range(2, N):
			if F[n-1] > Fmax: break
			F[n] = F[n-1] + F[n-2]

		if save: self.Fibonacci = F[:n-1]
		return F[:n-1]

	@timer
	def primes_calculate(self, N):
		prime_list = np.zeros(N, dtype=np.int64) 
		prime_list[0] = 2
		p = np.array([1])

		for n in range(3, N, 2):
			for m in range(p[0]):
				if n%prime_list[m]==0: break
			
			if m+1 == p[0]:
				prime_list[p[0]] = n	
				p[0] += 1

		self.primes_list = prime_list[:p[0]]
		return self.primes_list

	@timer
	def primes_first_N(self, N):
		prime_list = np.zeros(N, dtype=np.int64)
		prime_list[0] = 2
		p = np.array([1])
		n = np.array([3])

		while p[0] < N :

			for m in range(p[0]):
				if n[0]%prime_list[m]==0: break
			
			if m+1 == p[0]:
				prime_list[p[0]] = n[0]	
				p[0] += 1

			n[0] += 2

		self.primes_list = prime_list[:p[0]]
		return self.primes_list

	@timer
	def primes_lower_N(self, N):
		prime_list = np.zeros(N, dtype=np.int64)
		prime_list[0] = 2
		p = np.array([1])
		n = np.array([3])

		while prime_list[p[0]-1] < N :
			for m in range(p[0]):
				if n[0]%prime_list[m]==0: break
			
			if m+1 == p[0]:
				prime_list[p[0]] = n[0]	
				p[0] += 1

			n[0] += 2

		self.primes_list = prime_list[:p[0]-1]
		return self.primes_list

	@timer
	def primes_load_upto(self, N):
		prime = np.loadtxt('primes1.txt')
		return prime[prime<N]

	@timer
	def factorize(self, N):
		self.primes_calculate( int(N**0.5) )
		prime_factors = np.zeros( int(N**0.5), dtype=np.int64)
		index = 0

		for p in self.primes_list:
			while N%p == 0:
				prime_factors[index] = p
				index += 1
				N /= p
			if p>N: break

		self.factorize_list = prime_factors[:index]
		print(f'Factores primos de {np.prod(self.factorize_list, dtype=np.int64)} : {self.factorize_list}' )
		return self.factorize_list

	def factorize_big_number(self, N):
		prime_list = np.zeros(100, dtype=np.int64) 
		index = 0

		n = 2
		while N > 1:
			if N%n == 0:	
				N /= n
				prime_list[index] = n
				index += 1
			else: 			n+=1

		self.primes_list = prime_list[:index]
		return self.primes_list

	def is_palindromic(self, N): return N == N[::-1]

	@timer
	def P2(self, N):
		'''
		Each new term in the Fibonacci sequence is generated by adding the 
		previous two terms. By starting with 1 and 2, the first 10 terms will be:
		
		1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
		
		By considering the terms in the Fibonacci sequence whose values do not 
		exceed four million, find the sum of the even-valued terms.
		'''
		sec = self.Fibonacci(N=4000000, Fmax=N)
		ans = np.sum(sec[sec%2==0])
		self.P1a = ans
		return ans

	@timer
	def P3(self, N):
		'''
		The prime factors of 13195 are 5, 7, 13 and 29.

		What is the largest prime factor of the number 600851475143 ?
		'''
		ans = self.factorize_big_number(N)[-1]
		return ans

	@timer
	def P4(self, N):
		'''
		A palindromic number reads the same both ways. 
		The largest palindrome made from the product of two 2-digit numbers 
		is 9009 = 91 × 99.

		Find the largest palindrome made from the product of two 3-digit numbers.
		'''
		#N = [n for n in str(N)]
		biggest = 0

		for n1 in range(999, 100, -1):
			for n2 in range(n1, 100, -1):
				if n1*n2>biggest:
					if self.is_palindromic( [n for n in str(n1*n2)] ):
						biggest = n1*n2
				else: break
			
		ans = biggest
		return ans


	@timer
	def P5(self, N):
		'''
		2520 is the smallest number that can be divided by each of the numbers 
		from 1 to 10 without any remainder.

		What is the smallest positive number that is evenly divisible by all of 
		the numbers from 1 to 20?
		'''
		def Diff(li1, li2):
			unique1, counts1 = np.unique(li1, return_counts=True) # list1
			unique2, counts2 = np.unique(li2, return_counts=True) # n
			dic1 = dict(zip(unique1, counts1))

			diff = []
			for i, n in enumerate(unique2):
				if n in unique1:
					if counts2[i]>dic1[n]:
						diff += [n]*(counts2[i]-dic1[n] ) 
				else:	diff  += [n]*counts2[i] 

			return diff

		list1 = [] # guardo los factores primos
		for n in range(N, 1, -1):
			if not n in list1: 
				list1 += Diff( list1, list(self.factorize_big_number(n) ) )

		ans = np.prod(list1, dtype=np.float64)
		return ans
	
	@timer
	def P6(self, N):
		'''
		The sum of the squares of the first ten natural numbers is,
		The square of the sum of the first ten natural numbers is,
		Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is.
		Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
		'''
		ans = np.sum( np.arange(1,N+1,1) )**2 - np.sum( np.arange(1,N+1,1)**2 )
		return ans

	@timer
	def P7(self, N):
		'''
		By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
		What is the 10 001st prime number?
		'''
		ans = self.primes_first_N(N)
		return ans[-1]

	@timer
	def P8(self, N, BN=None, v=False):
		'''
		The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
		73167176531330624919225119674426574742355349194934
		96983520312774506326239578318016984801869478851843
		85861560789112949495459501737958331952853208805511
		12540698747158523863050715693290963295227443043557
		66896648950445244523161731856403098711121722383113
		62229893423380308135336276614282806444486645238749
		30358907296290491560440772390713810515859307960866
		70172427121883998797908792274921901699720888093776
		65727333001053367881220235421809751254540594752243
		52584907711670556013604839586446706324415722155397
		53697817977846174064955149290862569321978468622482
		83972241375657056057490261407972968652414535100474
		82166370484403199890008895243450658541227588666881
		16427171479924442928230863465674813919123162824586
		17866458359124566529476545682848912883142607690042
		24219022671055626321111109370544217506941658960408
		07198403850962455444362981230987879927244284909188
		84580156166097919133875499200524063689912560717606
		05886116467109405077541002256983155200055935729725
		71636269561882670428252483600823257530420752963450
		Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
		'''
		BN = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450' if type(BN)==type(None) else BN
		Pmax = 0 
		Pindex = 0
		Plist = []
		for n in range(len(BN) - N):
			Pact = 1
			for m in range(N):
				Pact *= int(BN[n+m])
			if Pact > Pmax: 
				Pmax = Pact
				Pindex = n

		ans = Pmax
		if v: 
			print( 'Max product', Pmax, 'Max product index', Pindex)
		
		return ans

	@timer
	def P9(self, N, BN=None, v=False):
		'''
		A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
		a2 + b2 = c2

		For example, 32 + 42 = 9 + 16 = 25 = 52.

		There exists exactly one Pythagorean triplet for which a + b + c = 1000.
		Find the product abc.
		'''
		Ns = int(N/2)
		a = np.linspace(1, Ns, Ns, dtype=np.int32)
		a, b, c = np.meshgrid(a, a, a)
		s = a+b+c
		p = a**2 + b**2 - c**2
		L = np.logical_and(s==N, p==0)
		return a[L] * b[L] * c[L]

	@timer
	def P10(self, N):
		'''
		The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
		Find the sum of all the primes below two million.
		'''
		prime = self.primes_load_upto(N)
		return np.sum(prime)

	@timer
	def P11(self, N):
		'''
		In the 20×20 grid below, four numbers along a diagonal line have been marked in red.

		08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
		49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
		81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
		52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
		22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
		24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
		32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
		67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
		24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
		21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
		78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
		16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
		86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
		19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
		04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
		88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
		04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
		20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
		20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
		01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48

		The product of these numbers is 26 × 63 × 78 × 14 = 1788696.

		What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
		'''
		matrix = np.loadtxt('problem11.txt', dtype=np.int64)
		horizontal = matrix[3:, :] * matrix[2:-1, :] * matrix[1:-2, :] * matrix[0:-3, :]
		vertical   = matrix[:, 3:] * matrix[:, 2:-1] * matrix[:, 1:-2] * matrix[:, 0:-3]
		diagonalA  = matrix[3:, 3:] * matrix[2:-1, 2:-1] * matrix[1:-2, 1:-2] * matrix[0:-3, 0:-3]
		diagonalB = matrix[:-3, 3:] * matrix[1:-2, 2:-1] * matrix[2:-1, 1:-2] * matrix[3:, 0:-3]
		return np.max([np.max(horizontal),np.max(vertical),np.max(diagonalA),np.max(diagonalB)])

	@timer
	def P12(self, N, BN=None, v=False):
		'''
		The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
		1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
		Let us list the factors of the first seven triangle numbers:
		     1: 1
		     3: 1,3
		     6: 1,2,3,6
		    10: 1,2,5,10
		    15: 1,3,5,15
		    21: 1,3,7,21
		    28: 1,2,4,7,14,28
		We can see that 28 is the first triangle number to have over five divisors.
		What is the value of the first triangle number to have over five hundred divisors?
		'''
        # calculate number of divisor
        # with formula total div = 
        # (p1+1) * (p2+1) *.....* (pn+1)
        # where n = (a1^p1)*(a2^p2).... 
        # *(an^pn) ai being prime divisor
        # for n and pi are their respective 
        # power in factorization

		#a1**b1 + a2**b2
		n = np.linspace(1, N, N, dtype=np.int64)
		Dmax = [0,0]

		for i in n*(n+1)/2:

			factors = self.factorize_big_number(i)
			unique, counts = np.unique(factors, return_counts=True)
			dn = np.prod(counts+1)
			if Dmax[0]<dn:
				Dmax[0] = dn # numero de divisores 
				Dmax[1] = i  # maximo divisor

		return Dmax[1]

	@timer
	def P13(self, N, BN=None, v=False):
		'''
		Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
		'''
		f = open('problem13.txt')
		suma = 0
		for n in f:	suma += int(n[:-1]) 
		return suma

	@timer
	def P14(self, N, v=False):
		'''
		The following iterative sequence is defined for the set of positive integers:
		n → n/2 (n is even)
		n → 3n + 1 (n is odd)

		Using the rule above and starting with 13, we generate the following sequence:
		13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1

		It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
		Which starting number, under one million, produces the longest chain?
		NOTE: Once the chain starts the terms are allowed to go above one million.
		'''
		def finder(Ni):
			N0 = Ni
			l = 1
			while Ni != 1:
				Ni = Ni/2 if Ni%2==0 else 3*Ni+1
				if Ni < N0: 
					l += L[int(Ni)]
					break
				else:
					l += 1
			return l

		L = np.zeros(N)
		for n in range(1,N):
			L[n] = finder(n)

		return np.argmax(L), np.max(L)

	@timer
	def P98(self, N, BN=None, v=False):
		'''
		By replacing each of the letters in the word CARE with 1, 2, 9, and 6 
		respectively, we form a square number: 1296 = 362. What is remarkable 
		is that, by using the same digital substitutions, the anagram, RACE, 
		also forms a square number: 9216 = 962. We shall call CARE (and RACE) 
		a square anagram word pair and specify further that leading zeroes are 
		not permitted, neither may a different letter have the same digital 
		value as another letter.

		Using words.txt (right click and 'Save Link/Target As...'), a 16K text 
		file containing nearly two-thousand common English words, find all the 
		square anagram word pairs (a palindromic word is NOT considered to be 
		an anagram of itself).

		What is the largest square number formed by any member of such a pair?
		NOTE: All anagrams formed must be contained in the given text file.
		'''
		import itertools

		def num2hash(num, dic=dicNH):
			return ''.join([dic[n] for n in num ])

		# open file
		f = open('p098_words.txt')
		for n in f:
			W = n.split(',') 
		W = [ w[1:-1] for w in W] 

		# max word length
		Wmax = max([ len(w) for w in W]) 

		# Perfect squared number proc
		dicNH = {	'9':'A', '8':'B', '7':'C',
					'6':'D', '5':'E', '4':'F',
					'3':'G', '2':'H', '1':'I', '0':'J'}
		Aps = [ int(n*n) for n in range( int( (10**Wmax)**0.5)+1 ) ]
		Aps_tree = [ [] for n in range(Wmax) ] 
		for a in Aps:	Aps_tree[len(str(a))-1].append( a )

		print( len(Aps_tree[13]) )
		asdasd

		# classification tree by word length
		Wtree = [[] for n in range(Wmax) ] 
		for w in W:	Wtree[len(w)-1].append( w )

		# classification tree by word length and ordered alphabetically
		Wstree = [ [''.join(sorted( [w1 for w1  in w])) for w in b] for b in Wtree ] 

		for k, b in enumerate(Wstree):
			for i, n1 in enumerate(b):
				for j, n2 in enumerate(b[(i+1):]):

					if n1 == n2:
						if k == 5:
							print(i, n1, j, n2)
		
		asdf
		for n in W:
			for n2 in itertools.permutations(n, len(n)):
				print(n, n2)
				if n2 in W:
					print(n, n2)

		return w


	@timer
	def P206(self, N):
		'''
		Find the unique positive integer whose square has the form 1_2_3_4_5_6_7_8_9_0,
		where each “_” is a single digit.

		1_2_3_4_5_6_7_8_900

		1_2_3_4_5_6_7_8_9
		'''
		Nmin = 10203040506070809**0.5
		Nmax = 19293949596979899**0.5
		for n in range( 101010101, 138902662, 1):
			n2 = n*n
			if 	str(n*n)[0] == '1' and 	str(n*n)[2] == '2' and 	str(n*n)[4] == '3' and 	str(n*n)[6] == '4' and 	str(n*n)[8] == '5' and 	str(n*n)[10] == '6'  and str(n*n)[12] == '7' and 	str(n*n)[14] == '8' and 	str(n*n)[16] == '9':
				ans = n*10

		return ans

'''
Problem 362

Consider the number 54.
54 can be factored in 7 distinct ways into one or more factors larger than 1:
54, 2×27, 3×18, 6×9, 3×3×6, 2×3×9 and 2×3×3×3.
If we require that the factors are all squarefree only two ways remain: 3×3×6 and 2×3×3×3.

Let's call Fsf(n) the number of ways n can be factored into one or more squarefree factors larger than 1, so Fsf(54)=2.

Let S(n) be ∑ Fsf(k) for k=2 to n.

S(100)=193.

Find S(10 000 000 000).
'''

p = Problems()
'''
p.solve = {	'problems':	2, 
			'args':		4000000, }
p.solve = {	'problems':	3, 
			'args':		600851475143, }
p.solve = {	'problems':	4, 
			'args':		3, }
p.solve = {	'problems':	5, 
			'args':		20, }
p.solve = {	'problems':	6, 
			'args':		100, }
p.solve = {	'problems':	7,  # 104743
			'args':		101, }
p.solve = {	'problems':	8,  
			'args':		13, }
p.solve = {	'problems':	9,   
			'args':		1000, }
p.solve = {	'problems':	10,   
			'args':		2000000, }
p.solve = {	'problems':	98,   
			'args':		1, }
p.solve = {	'problems':	206,   
			'args':		1, }
'''

p.solve = {	'problems':	11,   
			'args':		1, }
p.solve = {	'problems':	12,   # solution : 76576500  :: 576
			'args':		1200, }
p.solve = {	'problems':	13,   
			'args':		1200, }
p.solve = {	'problems':	14,    # solution : 837799   ::  525
			'args':		1000000, }

'''
s=0
a=str(93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000)
for m in a:
	s+=int(m)
print(s)	

N1, N2 =1, 1
for n in range(5000):
	N1, N2 = N2, N1+N2
	print(n+2, len(str(N1)))
'''








